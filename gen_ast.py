import sys
from datetime import datetime

class CodeAssembler:
    def __init__(ca) -> None:
        ca.defTabSize = 4
        ca.body = [] 
        ca.tabSize = 0

    def insert(ca, line: str = ''):
        line = (ca.tabSize * " ") + line + "\n"
        ca.body.append(line);

    def dedent(ca):
        if (ca.tabSize > 0):
            ca.tabSize -= ca.defTabSize

    def indent(ca):
        ca.tabSize += ca.defTabSize

    def __str__(ca) -> str:
        return ''.join(ca.body)

def defineAst(outDir: str, baseClass: str, types: list[str]):
    outPath = "./" + outDir + '/' + baseClass + '.h'

    print("writing to", outPath)
    Cpp = CodeAssembler()
    Cpp.insert("//") 
    Cpp.insert(f"// {baseClass}.h")
    Cpp.insert("// Croix")
    Cpp.insert("//")
    day = datetime.today().strftime('%Y-%m-%d')
    Cpp.insert(f"// Generated by Joshua Pepple on {day}.")
    Cpp.insert("//")
    Cpp.insert()
    Cpp.insert(f"#ifndef {baseClass}_h")
    Cpp.insert(f"#define {baseClass}_h")
    Cpp.insert()

    Cpp.insert("#include <iostream>")
    Cpp.insert("#include <string>")
    Cpp.insert('#include "../Token.h"')
    Cpp.insert()
    Cpp.insert("using namespace std;")
    
    Cpp.insert()
    retType = "RValue"
    Cpp.insert(f"template <typename {retType}>")
    Cpp.insert(f"class {baseClass} " + "{")
    Cpp.insert("public:")
    
    Cpp.indent()
    Cpp.insert("class Visitor;")
    Cpp.dedent()
    
    for t in types:
        Cpp.insert()
        className = t.split(':')[0].strip()
        fields = t.split(':')[1].strip()
        defineType(Cpp, baseClass, className, fields, retType)
    
    # define visitor class
    defineVisitor(Cpp, baseClass, types, retType)

    Cpp.insert()
    Cpp.indent()
    Cpp.insert(f"virtual {retType} accept(Expr < {retType} >::Visitor* visitor) = 0;")
    Cpp.dedent()
    Cpp.insert("};")
    Cpp.insert()
    Cpp.insert(f"#endif /* {baseClass}_h */")
    
    with open(outPath, 'w+') as astFile:
        astFile.write(str(Cpp))
    # print(Cpp)

def defineVisitor(Cpp: CodeAssembler, baseClass: str, types: list[str], retVal: str):
    Cpp.insert()
    Cpp.indent()
    
    Cpp.insert("class Visitor {")

    Cpp.insert("public:")
    Cpp.indent()
    for t in types:
        # create 1 function for each type of object to be visited
        typeName = t.split(":")[0].strip()
        fnDef = f"virtual {retVal} visit{typeName}{baseClass}("
        fnDef += f'{baseClass} < {retVal} >::{typeName} {baseClass.lower()}) = 0;'
        Cpp.insert(fnDef)
    Cpp.dedent()
    Cpp.insert("};")
    Cpp.dedent()

def defineType(CA: CodeAssembler, baseClass: str, className: str, fieldList: str, retType: str):
    # start of new class 
    CA.indent()
    CA.insert(f"class {className} : public {baseClass} " + "{")

    CA.insert("public:")
    # indent into definition of class
    CA.indent()
    # constructor
    CA.insert(f"{className}({fieldList}) " + "{")
    # constructor body
    CA.indent()
    fields = fieldList.split(', ')
    for f in fields:
        if ">* " in f:
            varName = f.split(">* ")[1]
        else:
            varName = f.split(" ")[1]
        CA.insert(f"this->{varName} = {varName};")
    CA.dedent()

    CA.insert("}")

    CA.insert()
    CA.insert(f"{retType} accept(Expr < {retType} >::Visitor* visitor) " + "{")
    CA.indent()
    CA.insert(f"return visitor->visit{className}{baseClass}(*this);")
    CA.dedent()
    CA.insert("}")
    CA.dedent()

    CA.insert()
    CA.indent()
    for f in fields:
        CA.insert(f+';')
    CA.dedent()
    CA.insert("};")
    CA.dedent()
    

argc = len(sys.argv)
if (argc != 2):
    print("usage: py gen_ast.py <output_dir>")
    exit(64) # exit with wrong usage error

dest = sys.argv[1]

types = [ 
    "Binary    :  Expr < RValue >* left, Token op, Expr < RValue >* right",
    "Unary     :  Token op, Expr < RValue >* right",
    "Grouping  :  Expr < RValue >* expr",
    "Boolean   :  bool value",
    "Number    :  double value",
    "String    :  string value",
    # "Henok     :  int age, string hairColor, string top, string bottom"
]

defineAst(dest, "Expr", types)
